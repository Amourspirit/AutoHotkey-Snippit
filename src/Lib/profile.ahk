;{ License
/* Copyright (C) 2014-2017  Paul Moss
 * 
 * This file is part of AhkSnippy.
 *
 * AhkSnippy is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * AhkSnippy is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 */
; End:License ;}

;------------------------------------------------------------------------------
; <auto-generated>
;     This code was generated by a tool.
;     Runtime Version:0.7.3.0
;
;     Changes to this file may cause incorrect behavior and will be lost if
;     the code is regenerated.
; </auto-generated>
;------------------------------------------------------------------------------

class EndCharsEnum extends MfEnum
{
    static m_Instance := MfNull.Null
    
    __New(args*) {
        if (this.base.__Class != "EndCharsEnum")
        {
            throw new MfNotSupportedException(MfEnvironment.Instance.GetResourceString("NotSupportedException_Sealed_Class","EndCharsEnum"))
        }
        base.__New(args*)
        this.m_isInherited := this.__Class != "EndCharsEnum"
    }
    
    AddEnums() {
        this.AddEnumValue("Zero", 0)
        this.AddEnumValue("One", 1)
        this.AddEnumValue("Two", 2)
        this.AddEnumValue("Three", 3)
        this.AddEnumValue("Four", 4)
        this.AddEnumValue("Five", 5)
        this.AddEnumValue("Six", 6)
        this.AddEnumValue("Seven", 7)
        this.AddEnumValue("Eight", 8)
        this.AddEnumValue("Nine", 9)
        this.AddEnumValue("Upper_A", 10)
        this.AddEnumValue("Upper_B", 11)
        this.AddEnumValue("Upper_C", 12)
        this.AddEnumValue("Upper_D", 13)
        this.AddEnumValue("Upper_E", 14)
        this.AddEnumValue("Upper_F", 15)
        this.AddEnumValue("Upper_G", 16)
        this.AddEnumValue("Upper_H", 17)
        this.AddEnumValue("Upper_I", 18)
        this.AddEnumValue("Upper_J", 19)
        this.AddEnumValue("Upper_K", 20)
        this.AddEnumValue("Upper_L", 21)
        this.AddEnumValue("Upper_M", 22)
        this.AddEnumValue("Upper_N", 23)
        this.AddEnumValue("Upper_O", 24)
        this.AddEnumValue("Upper_P", 25)
        this.AddEnumValue("Upper_Q", 26)
        this.AddEnumValue("Upper_R", 27)
        this.AddEnumValue("Upper_S", 28)
        this.AddEnumValue("Upper_T", 29)
        this.AddEnumValue("Upper_U", 30)
        this.AddEnumValue("Upper_V", 31)
        this.AddEnumValue("Upper_W", 32)
        this.AddEnumValue("Upper_X", 33)
        this.AddEnumValue("Upper_Y", 34)
        this.AddEnumValue("Upper_Z", 35)
        this.AddEnumValue("Lower_A", 36)
        this.AddEnumValue("Lower_B", 37)
        this.AddEnumValue("Lower_C", 38)
        this.AddEnumValue("Lower_D", 39)
        this.AddEnumValue("Lower_E", 40)
        this.AddEnumValue("Lower_F", 41)
        this.AddEnumValue("Lower_G", 42)
        this.AddEnumValue("Lower_H", 43)
        this.AddEnumValue("Lower_I", 44)
        this.AddEnumValue("Lower_J", 45)
        this.AddEnumValue("Lower_K", 46)
        this.AddEnumValue("Lower_L", 47)
        this.AddEnumValue("Lower_M", 48)
        this.AddEnumValue("Lower_N", 49)
        this.AddEnumValue("Lower_O", 50)
        this.AddEnumValue("Lower_P", 51)
        this.AddEnumValue("Lower_Q", 52)
        this.AddEnumValue("Lower_R", 53)
        this.AddEnumValue("Lower_S", 54)
        this.AddEnumValue("Lower_T", 55)
        this.AddEnumValue("Lower_U", 56)
        this.AddEnumValue("Lower_V", 57)
        this.AddEnumValue("Lower_W", 58)
        this.AddEnumValue("Lower_X", 59)
        this.AddEnumValue("Lower_Y", 60)
        this.AddEnumValue("Lower_Z", 61)
        this.AddEnumValue("Space", 62)
        this.AddEnumValue("Tab", 63)
        this.AddEnumValue("Enter", 64)
        this.AddEnumValue("And", 65)
        this.AddEnumValue("SingleQuote", 66)
        this.AddEnumValue("DoubleQuote", 67)
        this.AddEnumValue("Asterisk", 68)
        this.AddEnumValue("AT", 69)
        this.AddEnumValue("BackQuote", 70)
        this.AddEnumValue("BackSlash", 71)
        this.AddEnumValue("ForwardShash", 72)
        this.AddEnumValue("CurlyBraceOpen", 73)
        this.AddEnumValue("CurlyBraceClose", 74)
        this.AddEnumValue("SquareBracketOpen", 75)
        this.AddEnumValue("SqureBracketClose", 76)
        this.AddEnumValue("OpenParenthesis", 77)
        this.AddEnumValue("CloseParenthesis", 78)
        this.AddEnumValue("Carat", 79)
        this.AddEnumValue("Colon", 80)
        this.AddEnumValue("Comma", 81)
        this.AddEnumValue("Dollar", 82)
        this.AddEnumValue("Equal", 83)
        this.AddEnumValue("ExclamationMark", 84)
        this.AddEnumValue("GreaterThan", 85)
        this.AddEnumValue("LessThan", 86)
        this.AddEnumValue("Hyphen", 87)
        this.AddEnumValue("Percent", 88)
        this.AddEnumValue("Pipe", 89)
        this.AddEnumValue("Plus", 90)
        this.AddEnumValue("Pound", 91)
        this.AddEnumValue("SemiColin", 92)
        this.AddEnumValue("Tilde", 93)
        this.AddEnumValue("UnderScore", 94)
        this.AddEnumValue("QuestionMark", 95)
        this.AddEnumValue("Period", 96)
    }
    
    GetInstance() {
        if (MfNull.IsNull(EndCharsEnum.m_Instance))
        {
            EndCharsEnum.m_Instance := new EndCharsEnum(0)
        }
        return EndCharsEnum.m_Instance
    }
    
}

class profile extends MfObject
{
    codeLanguageField := MfNull.Null
    windowsField := MfNull.Null
    profileEndCharsField := MfNull.Null
    versionField := ""
    minVersionField := ""
    nameField := ""
    globalProfileField := false
    schemaVersionField := MfNull.Null
    
    
    __New(args*) {
        base.__New()
        this.codeLanguageField := new profileCodeLanguage()
        this.windowsField :=  new MfGenericList(profileWindow)
        this.profileEndCharsField :=  new MfGenericList(MfEnum.EnumItem)
        this.globalProfileField := false
        this.schemaVersionField := 0
        this.m_isInherited := this.base.__Class != "profile"
        
        pCount := 0
        for i, param in args
        {
            pCount ++
        }
        if (pCount = 1)
        {
            this.ParseXml(args[1])
        }
        
    }
    
    ParseXml(sXml) {
        if (MfString.IsNullOrEmpty(sXml))
        {
            ex := new MfArgumentException(MfEnvironment.Instance.GetResourceString("ArgumentNull_Generic", "sXml"))
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        try
        {
            _xmlStr := MfString.GetValue(sXml)
            xml := Null
            xmlResult := XmlHelper.xpath_load(xml, _xmlStr)
            if (xmlResult = 0)
            {
                ex := new MfFormatException(MfEnvironment.Instance.GetResourceString("FormatException_UnableToLoad", "XML", A_ThisFunc))
                ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
                throw ex
            }
            ; Clear out list before reading new xml
            this.windowsField.Clear()
            this.profileEndCharsField.Clear()
            
            
            ; Set Property Values
            sCodeLanguageField := XmlHelper.xpath(xml, "/profile/codeLanguage")
            this.codeLanguageField.ParseXml(sCodeLanguageField)
            iCount := XmlHelper.xpath(xml, "/profile/windows/window/Count()")
            Loop,%iCount%
            {
                mfsWindowsField := new MfString(XmlHelper.xpath(xml, MfString.Format("/profile/windows/window[{0}]", A_Index)))
                mfsWindowsField.Trim()
                if (mfsWindowsField.Length > 0)
                {
                    objWindowsField := new profileWindow(mfsWindowsField)
                    this.windowsField.Add(objWindowsField)
                }
            }
            
            iCount := XmlHelper.xpath(xml, "/profile/profileEndChars/profileEndChar/Count()")
            Loop,%iCount%
            {
                mfsProfileEndCharsField := new MfString(XmlHelper.xpath(xml, MfString.Format("/profile/profileEndChars/profileEndChar[{0}]", A_Index)))
                mfsProfileEndCharsField.Trim()
                if (mfsProfileEndCharsField.Length > 0)
                {
                    xmlEnum := Null
                    EnumXmlResult := XmlHelper.xpath_load(xmlEnum, mfsProfileEndCharsField.Value)
                    if (EnumXmlResult = 0)
                    {
                        ex := new MfFormatException(MfEnvironment.Instance.GetResourceString("FormatException_UnableToLoad", "XML", A_ThisFunc))
                        ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
                        throw ex
                    }
                    EnumTextValue := XmlHelper.xpath(xmlEnum, "/profileEndChar/text()")
                    try
                    {
                        objProfileEndCharsField := MfEnum.ParseItem(EndCharsEnum.GetType(), EnumTextValue, true)
                        this.profileEndCharsField.Add(objProfileEndCharsField)
                    }
                    catch e
                    {
                        ex := new MfException(MfString.Format(MfEnvironment.Instance.GetResourceString("Exception_Error"), A_ThisFunc), e)
                        ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
                        throw ex
                    }
                }
            }
            
            ; Set Attribute Values
            mfsVersionField := new MfString(XmlHelper.xDecode(xml, "/profile/@version/text()"))
            mfsVersionField.Trim()
            this.versionField := mfsVersionField.Value
            
            mfsMinVersionField := new MfString(XmlHelper.xDecode(xml, "/profile/@minVersion/text()"))
            mfsMinVersionField.Trim()
            this.minVersionField := mfsMinVersionField.Value
            
            mfsNameField := new MfString(XmlHelper.xDecode(xml, "/profile/@name/text()"))
            mfsNameField.Trim()
            this.nameField := mfsNameField.Value
            
            strGlobalProfileField := XmlHelper.xpath(xml, "/profile/@globalProfile/text()")
            if (!MfNull.IsNull(strGlobalProfileField))
            {
                bGlobalProfileField := new MfBool(MfBool.False)
                if(MfBool.TryParse(bGlobalProfileField, strGlobalProfileField))
                {
                    this.globalProfileField := bGlobalProfileField.Value
                }
            }
            else
            {
                this.globalProfileField := false
            }
            
            mfsSchemaVersionField := new MfString(XmlHelper.xDecode(xml, "/profile/@schemaVersion/text()"))
            mfsSchemaVersionField.Trim()
            this.schemaVersionField := mfsSchemaVersionField.Value
            
        }
        catch e
        {
            ex := new MfException(MfString.Format(MfEnvironment.Instance.GetResourceString("Exception_Error"), A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
    }
    
    ToXml() {
        retval := Null
        try
        {
            smfXml := new MfString()
            smfXml.Append("<profile")
            smfXml.Append(MfString.Format(" version={0}{1}{0}", """", XmlHelper.Encode(this.versionField)))
            
            smfXml.Append(MfString.Format(" minVersion={0}{1}{0}", """", XmlHelper.Encode(this.minVersionField)))
            
            smfXml.Append(MfString.Format(" name={0}{1}{0}", """", XmlHelper.Encode(this.nameField)))
            
            mfbGlobalProfileField := new MfBool(this.globalProfileField)
            smfXml.Append(MfString.Format(" globalProfile={0}{1}{0}", """", mfbGlobalProfileField.ToString()))
            
            smfXml.Append(MfString.Format(" schemaVersion={0}{1}{0}", """", XmlHelper.Encode(this.schemaVersionField)))
            
            smfXml.AppendLine(">")
            ; Read Property Values
            smfXml.Append("<codeLanguage>")
            smfXml.Append(this.codeLanguageField.ToXml())
            smfXml.AppendLine("</codeLanguage>")
            
            for i, element in this.windowsField
            {
                smfXml.AppendLine(element.ToXml())
            }
            
            smfXml.Append("<profileEndChars>")
            for i, element in this.profileEndCharsField
            {
                smfXml.Append("<profileEndChar>")
                smfXml.Append(element.ToString())
                smfXml.AppendLine("</profileEndChar>")
            }
            smfXml.AppendLine("</profileEndChars>")
            smfXml.AppendLine("</profile>")
            retval := smfXml.Value
        }
        catch e
        {
            ex := new MfException(MfEnvironment.Instance.GetResourceString("Exception_Error", A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        return retval
    }
    
    codeLanguage[]
    {
        get
        {
            return this.codeLanguageField
        }
        set
        {
            this.codeLanguageField := value
            return this.codeLanguageField
        }
    }
    
    windows[]
    {
        get
        {
            return this.windowsField
        }
        set
        {
            this.windowsField := value
            return this.windowsField
        }
    }
    
    profileEndChars[]
    {
        get
        {
            return this.profileEndCharsField
        }
        set
        {
            this.profileEndCharsField := value
            return this.profileEndCharsField
        }
    }
    
    version[]
    {
        get
        {
            return this.versionField
        }
        set
        {
            this.versionField := value
            return this.versionField
        }
    }
    
    minVersion[]
    {
        get
        {
            return this.minVersionField
        }
        set
        {
            this.minVersionField := value
            return this.minVersionField
        }
    }
    
    name[]
    {
        get
        {
            return this.nameField
        }
        set
        {
            this.nameField := value
            return this.nameField
        }
    }
    
    globalProfile[]
    {
        get
        {
            return this.globalProfileField
        }
        set
        {
            this.globalProfileField := value
            return this.globalProfileField
        }
    }
    
    schemaVersion[]
    {
        get
        {
            return this.schemaVersionField
        }
        set
        {
            this.schemaVersionField := value
            return this.schemaVersionField
        }
    }
    
}

class profileCodeLanguage extends MfObject
{
    codeNameField := ""
    descriptionField := ""
    pathsField := MfNull.Null
    
    
    __New(args*) {
        base.__New()
        this.pathsField := new profileCodeLanguagePaths()
        this.m_isInherited := this.base.__Class != "profileCodeLanguage"
        
        pCount := 0
        for i, param in args
        {
            pCount ++
        }
        if (pCount = 1)
        {
            this.ParseXml(args[1])
        }
        
    }
    
    ParseXml(sXml) {
        if (MfString.IsNullOrEmpty(sXml))
        {
            ex := new MfArgumentException(MfEnvironment.Instance.GetResourceString("ArgumentNull_Generic", "sXml"))
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        try
        {
            _xmlStr := MfString.GetValue(sXml)
            xml := Null
            xmlResult := XmlHelper.xpath_load(xml, _xmlStr)
            if (xmlResult = 0)
            {
                ex := new MfFormatException(MfEnvironment.Instance.GetResourceString("FormatException_UnableToLoad", "XML", A_ThisFunc))
                ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
                throw ex
            }
            
            ; Set Property Values
            mfsCodeNameField := new MfString(XmlHelper.xDecode(xml, "/codeLanguage/codeName/text()"))
            mfsCodeNameField.Trim()
            this.codeNameField := mfsCodeNameField.Value
            
            mfsDescriptionField := new MfString(XmlHelper.xDecode(xml, "/codeLanguage/description/text()"))
            mfsDescriptionField.Trim()
            this.descriptionField := mfsDescriptionField.Value
            
            sPathsField := XmlHelper.xpath(xml, "/codeLanguage/paths")
            this.pathsField.ParseXml(sPathsField)
        }
        catch e
        {
            ex := new MfException(MfString.Format(MfEnvironment.Instance.GetResourceString("Exception_Error"), A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
    }
    
    ToXml() {
        retval := Null
        try
        {
            smfXml := new MfString()
            smfXml.Append("<codeLanguage")
            smfXml.AppendLine(">")
            ; Read Property Values
            smfXml.Append("<codeName>")
            smfXml.Append(XmlHelper.Encode(this.codeNameField))
            smfXml.AppendLine("</codeName>")
            
            smfXml.Append("<description>")
            smfXml.Append(XmlHelper.Encode(this.descriptionField))
            smfXml.AppendLine("</description>")
            
            smfXml.Append("<paths>")
            smfXml.Append(this.pathsField.ToXml())
            smfXml.AppendLine("</paths>")
            
            smfXml.AppendLine("</codeLanguage>")
            retval := smfXml.Value
        }
        catch e
        {
            ex := new MfException(MfEnvironment.Instance.GetResourceString("Exception_Error", A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        return retval
    }
    
    codeName[]
    {
        get
        {
            return this.codeNameField
        }
        set
        {
            this.codeNameField := value
            return this.codeNameField
        }
    }
    
    description[]
    {
        get
        {
            return this.descriptionField
        }
        set
        {
            this.descriptionField := value
            return this.descriptionField
        }
    }
    
    paths[]
    {
        get
        {
            return this.pathsField
        }
        set
        {
            this.pathsField := value
            return this.pathsField
        }
    }
    
}

class profileCodeLanguagePaths extends MfObject
{
    mainDataField := ""
    pluginField := ""
    snipsField := ""
    dataItemsPathField := ""
    
    
    __New(args*) {
        base.__New()
        this.m_isInherited := this.base.__Class != "profileCodeLanguagePaths"
        
        pCount := 0
        for i, param in args
        {
            pCount ++
        }
        if (pCount = 1)
        {
            this.ParseXml(args[1])
        }
        
    }
    
    ParseXml(sXml) {
        if (MfString.IsNullOrEmpty(sXml))
        {
            ex := new MfArgumentException(MfEnvironment.Instance.GetResourceString("ArgumentNull_Generic", "sXml"))
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        try
        {
            _xmlStr := MfString.GetValue(sXml)
            xml := Null
            xmlResult := XmlHelper.xpath_load(xml, _xmlStr)
            if (xmlResult = 0)
            {
                ex := new MfFormatException(MfEnvironment.Instance.GetResourceString("FormatException_UnableToLoad", "XML", A_ThisFunc))
                ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
                throw ex
            }
            
            ; Set Property Values
            mfsMainDataField := new MfString(XmlHelper.xDecode(xml, "/paths/mainData/text()"))
            mfsMainDataField.Trim()
            this.mainDataField := mfsMainDataField.Value
            
            mfsPluginField := new MfString(XmlHelper.xDecode(xml, "/paths/plugin/text()"))
            mfsPluginField.Trim()
            this.pluginField := mfsPluginField.Value
            
            mfsSnipsField := new MfString(XmlHelper.xDecode(xml, "/paths/snips/text()"))
            mfsSnipsField.Trim()
            this.snipsField := mfsSnipsField.Value
            
            mfsDataItemsPathField := new MfString(XmlHelper.xDecode(xml, "/paths/dataItemsPath/text()"))
            mfsDataItemsPathField.Trim()
            this.dataItemsPathField := mfsDataItemsPathField.Value
            
        }
        catch e
        {
            ex := new MfException(MfString.Format(MfEnvironment.Instance.GetResourceString("Exception_Error"), A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
    }
    
    ToXml() {
        retval := Null
        try
        {
            smfXml := new MfString()
            smfXml.Append("<paths")
            smfXml.AppendLine(">")
            ; Read Property Values
            smfXml.Append("<mainData>")
            smfXml.Append(XmlHelper.Encode(this.mainDataField))
            smfXml.AppendLine("</mainData>")
            
            smfXml.Append("<plugin>")
            smfXml.Append(XmlHelper.Encode(this.pluginField))
            smfXml.AppendLine("</plugin>")
            
            smfXml.Append("<snips>")
            smfXml.Append(XmlHelper.Encode(this.snipsField))
            smfXml.AppendLine("</snips>")
            
            smfXml.Append("<dataItemsPath>")
            smfXml.Append(XmlHelper.Encode(this.dataItemsPathField))
            smfXml.AppendLine("</dataItemsPath>")
            
            smfXml.AppendLine("</paths>")
            retval := smfXml.Value
        }
        catch e
        {
            ex := new MfException(MfEnvironment.Instance.GetResourceString("Exception_Error", A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        return retval
    }
    
    mainData[]
    {
        get
        {
            return this.mainDataField
        }
        set
        {
            this.mainDataField := value
            return this.mainDataField
        }
    }
    
    plugin[]
    {
        get
        {
            return this.pluginField
        }
        set
        {
            this.pluginField := value
            return this.pluginField
        }
    }
    
    snips[]
    {
        get
        {
            return this.snipsField
        }
        set
        {
            this.snipsField := value
            return this.snipsField
        }
    }
    
    dataItemsPath[]
    {
        get
        {
            return this.dataItemsPathField
        }
        set
        {
            this.dataItemsPathField := value
            return this.dataItemsPathField
        }
    }
    
}

class profileWindow extends MfObject
{
    nameField := ""
    valueField := ""
    
    
    __New(args*) {
        base.__New()
        this.m_isInherited := this.base.__Class != "profileWindow"
        
        pCount := 0
        for i, param in args
        {
            pCount ++
        }
        if (pCount = 1)
        {
            this.ParseXml(args[1])
        }
        
    }
    
    ParseXml(sXml) {
        if (MfString.IsNullOrEmpty(sXml))
        {
            ex := new MfArgumentException(MfEnvironment.Instance.GetResourceString("ArgumentNull_Generic", "sXml"))
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        try
        {
            _xmlStr := MfString.GetValue(sXml)
            xml := Null
            xmlResult := XmlHelper.xpath_load(xml, _xmlStr)
            if (xmlResult = 0)
            {
                ex := new MfFormatException(MfEnvironment.Instance.GetResourceString("FormatException_UnableToLoad", "XML", A_ThisFunc))
                ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
                throw ex
            }
            
            ; Set Property Values
            mfsNameField := new MfString(XmlHelper.xDecode(xml, "/window/name/text()"))
            mfsNameField.Trim()
            this.nameField := mfsNameField.Value
            
            mfsValueField := new MfString(XmlHelper.xDecode(xml, "/window/value/text()"))
            mfsValueField.Trim()
            this.valueField := mfsValueField.Value
            
        }
        catch e
        {
            ex := new MfException(MfString.Format(MfEnvironment.Instance.GetResourceString("Exception_Error"), A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
    }
    
    ToXml() {
        retval := Null
        try
        {
            smfXml := new MfString()
            smfXml.Append("<window")
            smfXml.AppendLine(">")
            ; Read Property Values
            smfXml.Append("<name>")
            smfXml.Append(XmlHelper.Encode(this.nameField))
            smfXml.AppendLine("</name>")
            
            smfXml.Append("<value>")
            smfXml.Append(XmlHelper.Encode(this.valueField))
            smfXml.AppendLine("</value>")
            
            smfXml.AppendLine("</window>")
            retval := smfXml.Value
        }
        catch e
        {
            ex := new MfException(MfEnvironment.Instance.GetResourceString("Exception_Error", A_ThisFunc), e)
            ex.SetProp(A_LineFile, A_LineNumber, A_ThisFunc)
            throw ex
        }
        return retval
    }
    
    name[]
    {
        get
        {
            return this.nameField
        }
        set
        {
            this.nameField := value
            return this.nameField
        }
    }
    
    value[]
    {
        get
        {
            return this.valueField
        }
        set
        {
            this.valueField := value
            return this.valueField
        }
    }
    
}